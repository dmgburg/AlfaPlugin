{
  parserClass="com.dmgburg.alfa.psi.parser.AlfaParser"
//  parserUtilClass="com.dmgburg.alfa.psi.parser.AlfaParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Alfa"
  psiImplClassSuffix="Impl"
  psiPackage="com.dmgburg.alfa.psi"
  psiImplPackage="com.dmgburg.alfa.psi.impl"

  elementTypeHolderClass="com.dmgburg.alfa.psi.AlfaTypes"
  elementTypeClass="com.dmgburg.alfa.psi.AlfaElementType"
  tokenTypeClass="com.dmgburg.alfa.psi.AlfaTokenType"

  tokens = [
//      dot='.'
//      curve1='{'
//      curve2='}'
      and='&&'
      or='||'
      lessOrEqual='<='
      moreOrEqual='>='
      less='<'
      more='>'
      plus='+'
      munus='-'
      multiply='*'
      divide='/'
      equal='=='

      IDENTIFIER="regexp:\w+"
      WHITE_SPACE='regexp:\s+'
      string_literal="regexp:('([^'\\]|\\.)*'|\"([^\"\\]|\\\"|\\\'|\\)*\")"
      line_comment="regexp://.*"
      block_comment="regexp:/\*(.|\n)*?\*/"
    ]
}

root ::= namespaceEntry+

namespaceEntry ::= namespace namespaceName '{' namespaceBody* '}' { pin=3 recoverWhile=namespace_recover}
private namespace_recover::=!(namespaceBodyStart|'}')
private namespaceBodyStart ::= namespace|policy|policyset|rule

namespaceName ::= qualifiedName

qualifiedName ::= IDENTIFIER ['.' IDENTIFIER]

namespaceBody ::= (
    namespaceEntry|
    policySetEntry|
    policyEntry|
    ruleEntry|
    obligationDeclaration|
    adviceDeclaration|
    attributeDeclaration|
    policyCombinatorDeclaration|
    ruleCombinatorDeclaration|
    typeDeclaration|
    operatorDeclaration|
    functionDeclaration|
    importDeclaration|
    categoryDeclaration
    )

policySetEntry ::= policyset policySetName? description? '{' policySetBody* '}' {pin=4 recoverWhile=policy_set_recover}
private policy_set_recover::=!(policysetBodyStart|'}')
private policysetBodyStart ::= policy|policyset|rule|apply|target|on|qualifiedName

policySetName ::= qualifiedName

policySetBody ::= combinationAlgorithmRef|
        targetEntry|
        onEffect|
        ref|
        policyEntry|
        policySetEntry

policyEntry ::= policy policyName? description? '{' policyBody* '}' { pin=4 recoverWhile=policy_recover}
private policy_recover::=!(policyBodyStart|'}')
private policyBodyStart ::= rule|apply|target|on|qualifiedName

policyBody ::= targetEntry|
        combinationAlgorithmRef|
        onEffect|
        ref|
        ruleEntry

policyName ::= idDeclaration

idDeclaration ::= IDENTIFIER ('=' xacmlDeclaration)?

xacmlDeclaration ::= STRING_LITERAL

targetEntry ::= target clauseEntry+

clauseEntry ::= clause clauseExpression clauseAddin*

clauseAddin ::= clauseOperator clauseExpression

clauseExpression ::= singleClauseExpression | functionClause

functionClause ::= functionRefName '(' functionClauseArgument (',' functionClauseArgument)* ')'

functionClauseArgument ::= attributeRef | constant

singleClauseExpression ::= leftClauseOperand operator rightClauseOperand

operator ::= '&&' | '||' | '<=' | '>=' | '<' | '>' | '+' | '-' | '*' | '/' | '=='

leftClauseOperand ::= clauseOperand

rightClauseOperand ::= clauseOperand

clauseOperator ::= IDENTIFIER

clauseOperand ::= attributeRef | constant

attributeRef ::= ref attributeDesignator?

attributeDesignator ::= '[' attributeDesignatorMustBePresent? attributeDesignatorIssuer? ']'

attributeDesignatorMustBePresent ::= musteepresent

attributeDesignatorIssuer ::= issuer '=' STRING_LITERAL

ref ::= qualifiedName

combinationAlgorithmRef ::= 'apply' ref

ruleEntry ::= rule ruleName? description? '{' effect ruleBody* '}' {pin=4 recoverWhile=ruleRecover}
private ruleRecover ::= !('}')

description ::= STRING_LITERAL

ruleBody ::= targetEntry | conditionEntry | onEffect

conditionEntry ::= condition conditionBody

conditionBody ::= wrappedExpressions | expressions

wrappedExpressions ::= '(' expressions ')'

expressions ::= expression expressionAddin*

expressionAddin ::= operator expression

expression ::= operand | wrappedExpressions

operand ::= functionEntry | attributeRef | constant | wrappedExpressions

functionEntry ::= functionRefName '(' functionArgument (',' functionArgument)* ')'

functionRefName ::= ref

functionArgument ::= functionRef | operand | expressions | wrappedExpressions

functionRef ::= function '[' functionRefName ']'

ruleName ::= idDeclaration

effect ::= permit|deny

onEffect ::= on effect '{' obligationOrAdviceBody+ '}' {pin=3}

// obligation and advice

obligationOrAdviceBody ::= obligationBody | adviceBody

obligationBody ::= obligation obligationRef ('{' attributeAssignBody '}')?

adviceBody ::= advice adviceRef ('{' attributeAssignBody '}')?

obligationRef ::= ref

attributeAssignBody ::= attributeAssign+

attributeAssign ::= attributeRef '=' expression

adviceRef ::= ref

obligationDeclaration ::= obligation idDeclaration

adviceDeclaration ::= advice idDeclaration

//Attributes
attributeDeclaration ::= attribute attributeName '{' attributeBody '}'

attributeName ::= IDENTIFIER

attributeBody ::= attributeId attributeType attributeCategory

attributeId ::= id '=' xacmlDeclaration

attributeType ::= type '=' ref

attributeCategory ::= category '=' ref

// Combining algorithms

ruleCombinatorDeclaration ::= ruleCombinator algorithmName '=' xacmlDeclaration

policyCombinatorDeclaration ::= policyCombinator algorithmName '=' xacmlDeclaration

algorithmName ::= IDENTIFIER

// category declaration

categoryDeclaration ::= category categoryName '=' xacmlDeclaration

categoryName ::= IDENTIFIER

// type declaration

typeDeclaration ::= type typeName '=' xacmlDeclaration

typeName ::= IDENTIFIER

// function declaration

functionDeclaration ::= function functionName '=' functionBody

functionName ::=  IDENTIFIER

functionBody ::= xacmlDeclaration ':' functionBodyArgument+ variableArguments? '->' functionBodyReturn

variableArguments ::= '*'

functionBodyArgument ::= typeRef | typeBag | anyAtomicType | anyAtomicOrBagType | functionType

functionBodyReturn ::= typeRef | typeBag | anyAtomicType

typeRef ::= ref

typeBag ::= bag '[' (typeRef| anyAtomicType) ']'

anyAtomicType ::= anyAtomic

anyAtomicOrBagType ::= anyAtomicOrBag

functionType ::= function

// operators

operatorDeclaration ::= infix operatorFeature* '(' operator ')' '=' '{' operatorDeclarationBody+ '}' operatorInvrese?

operatorFeature ::= OperatorFeature

operatorInvrese ::= inv operator

operatorDeclarationBody ::= functionBody

// import declaration

importDeclaration ::= import importName

importName ::= qualifiedName importEverything?

importEverything ::= '.' '*'

// constants

constant ::= integerLiteral|
    STRING_LITERAL
//    booleanLiteral|
//    floatingPointLiteral|
//    ipAddressLiteral


integerLiteral ::= Sign? DecimalIntegerLiteral

Sign ::= '+'|'-'

// DecimalIntegerLiteral ::=