/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.dmgburg.alfa.psi.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.dmgburg.alfa.psi.AlfaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>AlfaLexer.flex</tt>
 */
public class _AlfaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\2\3\3\22\0\1\5\1\0\1\10\3\0\1\16\1\6\2\0\1\12\1\23\1\0\1\24\1"+
    "\13\1\11\12\4\1\25\1\0\1\20\1\21\1\22\2\0\1\52\1\54\1\51\1\57\1\4\1\56\2\4"+
    "\1\60\2\4\1\61\2\4\1\53\13\4\1\0\1\7\2\0\1\4\1\0\1\27\1\47\1\34\1\45\1\31"+
    "\1\46\1\43\1\4\1\37\2\4\1\36\1\30\1\26\1\35\1\33\1\4\1\42\1\32\1\41\1\44\1"+
    "\50\1\4\1\55\1\40\1\4\1\14\1\17\1\15\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\2\1\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\16\3\1\0\1\17\3\0\1\20\1\0\1\21"+
    "\1\22\1\23\1\24\1\25\13\3\1\26\4\3\1\27"+
    "\10\3\1\17\1\0\15\3\1\30\7\3\1\31\2\3"+
    "\1\32\20\3\1\33\1\34\1\35\5\3\1\36\11\3"+
    "\1\37\12\3\1\40\1\3\1\41\1\42\2\3\1\43"+
    "\1\3\1\44\1\45\1\46\27\3\1\47\3\3\1\50"+
    "\2\3\1\51\1\52\1\53\1\3\1\54\1\3\1\55"+
    "\7\3\1\56\20\3\1\57\4\3\1\60\1\3\1\61"+
    "\3\3\1\62\1\3\1\63\5\3\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\62"+
    "\0\62\0\62\0\62\0\u015e\0\u0190\0\u01c2\0\u01f4\0\u0226"+
    "\0\62\0\62\0\62\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320"+
    "\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\310\0\62\0\u0514\0\372\0\u0546\0\u0578\0\u05aa"+
    "\0\62\0\62\0\62\0\62\0\62\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\226\0\u0802\0\u0834\0\u0866\0\u0898\0\226\0\u08ca\0\u08fc"+
    "\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\372\0\u0a5a"+
    "\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea"+
    "\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\226\0\u0d16\0\u0d48"+
    "\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\226\0\u0e74\0\u0ea6"+
    "\0\u05aa\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004"+
    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130\0\u1162\0\u1194"+
    "\0\u11c6\0\226\0\u11f8\0\226\0\u122a\0\u125c\0\u128e\0\u12c0"+
    "\0\u12f2\0\226\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\226\0\u14e6\0\u1518\0\u154a\0\u157c"+
    "\0\u15ae\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\226\0\u16da"+
    "\0\226\0\u170c\0\u173e\0\u1770\0\226\0\u17a2\0\226\0\226"+
    "\0\226\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce\0\u1900"+
    "\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa\0\u1a2c\0\u1a5e\0\u1a90"+
    "\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc\0\u1bee\0\u1c20"+
    "\0\226\0\u1c52\0\u1c84\0\u1cb6\0\226\0\u1ce8\0\u1d1a\0\226"+
    "\0\u1d4c\0\226\0\u1d7e\0\226\0\u1db0\0\226\0\u1de2\0\u1e14"+
    "\0\u1e46\0\u1e78\0\u1eaa\0\u1edc\0\u1f0e\0\226\0\u1f40\0\u1f72"+
    "\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c\0\u209e\0\u20d0\0\u2102"+
    "\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc\0\u222e\0\226\0\u2260"+
    "\0\u2292\0\u22c4\0\u22f6\0\226\0\u2328\0\226\0\u235a\0\u238c"+
    "\0\u23be\0\226\0\u23f0\0\226\0\u2422\0\u2454\0\u2486\0\u24b8"+
    "\0\u24ea\0\226";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\3\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\2\4"+
    "\1\27\1\30\1\31\1\4\1\32\1\4\1\33\1\34"+
    "\2\4\1\35\1\36\1\37\3\4\1\40\3\4\1\41"+
    "\2\4\64\0\2\3\1\0\1\3\60\0\1\4\21\0"+
    "\34\4\6\42\1\43\1\44\52\42\7\45\1\46\1\43"+
    "\51\45\11\0\1\47\1\50\65\0\1\51\62\0\1\52"+
    "\63\0\1\53\61\0\1\54\61\0\1\55\44\0\1\4"+
    "\21\0\1\4\1\56\32\4\4\0\1\4\21\0\1\57"+
    "\4\4\1\60\5\4\1\61\3\4\1\62\14\4\4\0"+
    "\1\4\21\0\16\4\1\63\15\4\4\0\1\4\21\0"+
    "\3\4\1\64\3\4\1\65\24\4\4\0\1\4\21\0"+
    "\1\4\1\66\5\4\1\67\1\70\23\4\4\0\1\4"+
    "\21\0\1\71\20\4\1\72\12\4\4\0\1\4\21\0"+
    "\1\73\1\4\1\74\1\4\1\75\12\4\1\76\14\4"+
    "\4\0\1\4\21\0\1\4\1\77\10\4\1\100\21\4"+
    "\4\0\1\4\21\0\16\4\1\101\15\4\4\0\1\4"+
    "\21\0\3\4\1\102\30\4\4\0\1\4\21\0\16\4"+
    "\1\103\15\4\4\0\1\4\21\0\1\4\1\104\32\4"+
    "\4\0\1\4\21\0\5\4\1\105\26\4\4\0\1\4"+
    "\21\0\3\4\1\106\30\4\1\42\3\0\56\42\7\45"+
    "\1\46\1\107\51\45\1\47\3\0\56\47\1\50\1\0"+
    "\1\50\1\0\6\50\1\110\47\50\4\0\1\4\21\0"+
    "\2\4\1\111\31\4\4\0\1\4\21\0\12\4\1\112"+
    "\21\4\4\0\1\4\21\0\5\4\1\113\26\4\4\0"+
    "\1\4\21\0\13\4\1\114\20\4\4\0\1\4\21\0"+
    "\22\4\1\115\11\4\4\0\1\4\21\0\4\4\1\116"+
    "\27\4\4\0\1\4\21\0\14\4\1\117\17\4\4\0"+
    "\1\4\21\0\10\4\1\120\23\4\4\0\1\4\21\0"+
    "\13\4\1\121\20\4\4\0\1\4\21\0\1\122\33\4"+
    "\4\0\1\4\21\0\1\4\1\123\32\4\4\0\1\4"+
    "\21\0\10\4\1\124\23\4\4\0\1\4\21\0\20\4"+
    "\1\125\1\4\1\126\11\4\4\0\1\4\21\0\5\4"+
    "\1\127\26\4\4\0\1\4\21\0\4\4\1\130\27\4"+
    "\4\0\1\4\21\0\14\4\1\131\17\4\4\0\1\4"+
    "\21\0\5\4\1\132\26\4\4\0\1\4\21\0\10\4"+
    "\1\133\23\4\4\0\1\4\21\0\1\134\33\4\4\0"+
    "\1\4\21\0\1\135\33\4\4\0\1\4\21\0\15\4"+
    "\1\136\16\4\4\0\1\4\21\0\3\4\1\137\30\4"+
    "\4\0\1\4\21\0\6\4\1\140\25\4\1\50\1\0"+
    "\1\50\1\0\5\50\1\141\1\110\47\50\4\0\1\4"+
    "\21\0\3\4\1\142\30\4\4\0\1\4\21\0\24\4"+
    "\1\143\7\4\4\0\1\4\21\0\10\4\1\144\23\4"+
    "\4\0\1\4\21\0\14\4\1\145\17\4\4\0\1\4"+
    "\21\0\11\4\1\146\22\4\4\0\1\4\21\0\13\4"+
    "\1\147\20\4\4\0\1\4\21\0\2\4\1\150\31\4"+
    "\4\0\1\4\21\0\11\4\1\151\22\4\4\0\1\4"+
    "\21\0\3\4\1\152\30\4\4\0\1\4\21\0\17\4"+
    "\1\153\14\4\4\0\1\4\21\0\16\4\1\154\15\4"+
    "\4\0\1\4\21\0\11\4\1\155\22\4\4\0\1\4"+
    "\21\0\11\4\1\156\22\4\4\0\1\4\21\0\7\4"+
    "\1\157\24\4\4\0\1\4\21\0\16\4\1\160\15\4"+
    "\4\0\1\4\21\0\15\4\1\161\16\4\4\0\1\4"+
    "\21\0\3\4\1\162\30\4\4\0\1\4\21\0\3\4"+
    "\1\163\30\4\4\0\1\4\21\0\12\4\1\164\21\4"+
    "\4\0\1\4\21\0\6\4\1\165\25\4\4\0\1\4"+
    "\21\0\14\4\1\166\17\4\4\0\1\4\21\0\11\4"+
    "\1\167\22\4\4\0\1\4\21\0\4\4\1\170\27\4"+
    "\4\0\1\4\21\0\13\4\1\171\20\4\4\0\1\4"+
    "\21\0\12\4\1\172\21\4\4\0\1\4\21\0\11\4"+
    "\1\173\22\4\4\0\1\4\21\0\6\4\1\174\25\4"+
    "\4\0\1\4\21\0\3\4\1\175\30\4\4\0\1\4"+
    "\21\0\11\4\1\176\22\4\4\0\1\4\21\0\6\4"+
    "\1\177\25\4\4\0\1\4\21\0\15\4\1\200\16\4"+
    "\4\0\1\4\21\0\11\4\1\201\22\4\4\0\1\4"+
    "\21\0\4\4\1\202\27\4\4\0\1\4\21\0\15\4"+
    "\1\203\16\4\4\0\1\4\21\0\27\4\1\204\4\4"+
    "\4\0\1\4\21\0\14\4\1\205\17\4\4\0\1\4"+
    "\21\0\3\4\1\206\30\4\4\0\1\4\21\0\3\4"+
    "\1\207\30\4\4\0\1\4\21\0\23\4\1\210\10\4"+
    "\4\0\1\4\21\0\13\4\1\211\20\4\4\0\1\4"+
    "\21\0\1\4\1\212\32\4\4\0\1\4\21\0\2\4"+
    "\1\213\31\4\4\0\1\4\21\0\5\4\1\214\26\4"+
    "\4\0\1\4\21\0\7\4\1\215\24\4\4\0\1\4"+
    "\21\0\21\4\1\216\12\4\4\0\1\4\21\0\3\4"+
    "\1\217\30\4\4\0\1\4\21\0\3\4\1\220\30\4"+
    "\4\0\1\4\21\0\13\4\1\221\20\4\4\0\1\4"+
    "\21\0\12\4\1\222\21\4\4\0\1\4\21\0\7\4"+
    "\1\223\24\4\4\0\1\4\21\0\13\4\1\224\20\4"+
    "\4\0\1\4\21\0\3\4\1\225\30\4\4\0\1\4"+
    "\21\0\1\4\1\226\32\4\4\0\1\4\21\0\13\4"+
    "\1\227\20\4\4\0\1\4\21\0\14\4\1\230\17\4"+
    "\4\0\1\4\21\0\13\4\1\231\20\4\4\0\1\4"+
    "\21\0\7\4\1\232\24\4\4\0\1\4\21\0\11\4"+
    "\1\233\22\4\4\0\1\4\21\0\13\4\1\234\20\4"+
    "\4\0\1\4\21\0\1\4\1\235\32\4\4\0\1\4"+
    "\21\0\1\4\1\236\32\4\4\0\1\4\21\0\2\4"+
    "\1\237\31\4\4\0\1\4\21\0\16\4\1\240\15\4"+
    "\4\0\1\4\21\0\5\4\1\241\26\4\4\0\1\4"+
    "\21\0\4\4\1\242\16\4\1\243\10\4\4\0\1\4"+
    "\21\0\14\4\1\244\17\4\4\0\1\4\21\0\11\4"+
    "\1\245\22\4\4\0\1\4\21\0\13\4\1\246\20\4"+
    "\4\0\1\4\21\0\2\4\1\247\31\4\4\0\1\4"+
    "\21\0\7\4\1\250\24\4\4\0\1\4\21\0\7\4"+
    "\1\251\24\4\4\0\1\4\21\0\10\4\1\252\23\4"+
    "\4\0\1\4\21\0\6\4\1\253\25\4\4\0\1\4"+
    "\21\0\11\4\1\254\22\4\4\0\1\4\21\0\13\4"+
    "\1\255\20\4\4\0\1\4\21\0\14\4\1\256\17\4"+
    "\4\0\1\4\21\0\3\4\1\257\30\4\4\0\1\4"+
    "\21\0\7\4\1\260\24\4\4\0\1\4\21\0\12\4"+
    "\1\261\21\4\4\0\1\4\21\0\7\4\1\262\24\4"+
    "\4\0\1\4\21\0\11\4\1\263\22\4\4\0\1\4"+
    "\21\0\21\4\1\264\12\4\4\0\1\4\21\0\1\265"+
    "\33\4\4\0\1\4\21\0\14\4\1\266\17\4\4\0"+
    "\1\4\21\0\32\4\1\267\1\4\4\0\1\4\21\0"+
    "\3\4\1\270\30\4\4\0\1\4\21\0\6\4\1\271"+
    "\25\4\4\0\1\4\21\0\3\4\1\272\30\4\4\0"+
    "\1\4\21\0\3\4\1\273\30\4\4\0\1\4\21\0"+
    "\13\4\1\274\20\4\4\0\1\4\21\0\2\4\1\275"+
    "\31\4\4\0\1\4\21\0\1\276\33\4\4\0\1\4"+
    "\21\0\7\4\1\277\24\4\4\0\1\4\21\0\11\4"+
    "\1\300\22\4\4\0\1\4\21\0\30\4\1\301\3\4"+
    "\4\0\1\4\21\0\1\302\33\4\4\0\1\4\21\0"+
    "\25\4\1\303\6\4\4\0\1\4\21\0\4\4\1\304"+
    "\27\4\4\0\1\4\21\0\21\4\1\305\12\4\4\0"+
    "\1\4\21\0\1\306\33\4\4\0\1\4\21\0\1\307"+
    "\33\4\4\0\1\4\21\0\3\4\1\310\30\4\4\0"+
    "\1\4\21\0\13\4\1\311\20\4\4\0\1\4\21\0"+
    "\14\4\1\312\17\4\4\0\1\4\21\0\3\4\1\313"+
    "\30\4\4\0\1\4\21\0\11\4\1\314\22\4\4\0"+
    "\1\4\21\0\1\4\1\315\32\4\4\0\1\4\21\0"+
    "\1\4\1\316\32\4\4\0\1\4\21\0\3\4\1\317"+
    "\30\4\4\0\1\4\21\0\26\4\1\320\5\4\4\0"+
    "\1\4\21\0\1\321\33\4\4\0\1\4\21\0\1\322"+
    "\33\4\4\0\1\4\21\0\13\4\1\323\20\4\4\0"+
    "\1\4\21\0\13\4\1\324\20\4\4\0\1\4\21\0"+
    "\15\4\1\325\16\4\4\0\1\4\21\0\1\4\1\326"+
    "\32\4\4\0\1\4\21\0\13\4\1\327\20\4\4\0"+
    "\1\4\21\0\1\4\1\330\32\4\4\0\1\4\21\0"+
    "\7\4\1\331\24\4\4\0\1\4\21\0\16\4\1\332"+
    "\15\4\4\0\1\4\21\0\3\4\1\333\30\4\4\0"+
    "\1\4\21\0\15\4\1\334\16\4\4\0\1\4\21\0"+
    "\13\4\1\335\20\4\4\0\1\4\21\0\14\4\1\336"+
    "\17\4\4\0\1\4\21\0\14\4\1\337\17\4\4\0"+
    "\1\4\21\0\14\4\1\340\17\4\4\0\1\4\21\0"+
    "\7\4\1\341\24\4\4\0\1\4\21\0\3\4\1\342"+
    "\30\4\4\0\1\4\21\0\33\4\1\343\4\0\1\4"+
    "\21\0\14\4\1\344\17\4\4\0\1\4\21\0\11\4"+
    "\1\345\22\4\4\0\1\4\21\0\13\4\1\346\20\4"+
    "\4\0\1\4\21\0\3\4\1\347\30\4\4\0\1\4"+
    "\21\0\14\4\1\350\17\4\4\0\1\4\21\0\1\4"+
    "\1\351\32\4\4\0\1\4\21\0\10\4\1\352\23\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\4\11\5\1\3\11\16\1\1\0"+
    "\1\11\3\0\1\1\1\0\5\11\32\1\1\0\242\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[234];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AlfaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AlfaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 53: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 54: break;
          case 3: 
            { return IDENTIFIER;
            }
          case 55: break;
          case 4: 
            { return DIVIDE;
            }
          case 56: break;
          case 5: 
            { return MULTIPLY;
            }
          case 57: break;
          case 6: 
            { return DOT;
            }
          case 58: break;
          case 7: 
            { return CURVE1;
            }
          case 59: break;
          case 8: 
            { return CURVE2;
            }
          case 60: break;
          case 9: 
            { return LESS;
            }
          case 61: break;
          case 10: 
            { return ASSIGN;
            }
          case 62: break;
          case 11: 
            { return MORE;
            }
          case 63: break;
          case 12: 
            { return PLUS;
            }
          case 64: break;
          case 13: 
            { return MUNUS;
            }
          case 65: break;
          case 14: 
            { return COLON;
            }
          case 66: break;
          case 15: 
            { return STRING_LITERAL;
            }
          case 67: break;
          case 16: 
            { return LINE_COMMENT;
            }
          case 68: break;
          case 17: 
            { return AND;
            }
          case 69: break;
          case 18: 
            { return OR;
            }
          case 70: break;
          case 19: 
            { return LESSOREQUAL;
            }
          case 71: break;
          case 20: 
            { return EQUAL;
            }
          case 72: break;
          case 21: 
            { return MOREOREQUAL;
            }
          case 73: break;
          case 22: 
            { return ON;
            }
          case 74: break;
          case 23: 
            { return ID;
            }
          case 75: break;
          case 24: 
            { return INV;
            }
          case 76: break;
          case 25: 
            { return BAG;
            }
          case 77: break;
          case 26: 
            { return BLOCK_COMMENT;
            }
          case 78: break;
          case 27: 
            { return TYPE;
            }
          case 79: break;
          case 28: 
            { return RULE;
            }
          case 80: break;
          case 29: 
            { return DENY;
            }
          case 81: break;
          case 30: 
            { return APPLY;
            }
          case 82: break;
          case 31: 
            { return INFIX;
            }
          case 83: break;
          case 32: 
            { return ADVICE;
            }
          case 84: break;
          case 33: 
            { return PERMIT;
            }
          case 85: break;
          case 34: 
            { return POLICY;
            }
          case 86: break;
          case 35: 
            { return CLAUSE;
            }
          case 87: break;
          case 36: 
            { return IMPORT;
            }
          case 88: break;
          case 37: 
            { return ISSUER;
            }
          case 89: break;
          case 38: 
            { return TARGET;
            }
          case 90: break;
          case 39: 
            { return CATEGORY;
            }
          case 91: break;
          case 40: 
            { return FUNCTION;
            }
          case 92: break;
          case 41: 
            { return NAMESPACE;
            }
          case 93: break;
          case 42: 
            { return ANYATOMIC;
            }
          case 94: break;
          case 43: 
            { return ATTRIBUTE;
            }
          case 95: break;
          case 44: 
            { return POLICYSET;
            }
          case 96: break;
          case 45: 
            { return CONDITION;
            }
          case 97: break;
          case 46: 
            { return OBLIGATION;
            }
          case 98: break;
          case 47: 
            { return MUSTEEPRESENT;
            }
          case 99: break;
          case 48: 
            { return ANYATOMICORBAG;
            }
          case 100: break;
          case 49: 
            { return RULECOMBINATOR;
            }
          case 101: break;
          case 50: 
            { return OPERATORFEATURE;
            }
          case 102: break;
          case 51: 
            { return POLICYCOMBINATOR;
            }
          case 103: break;
          case 52: 
            { return DECIMALINTEGERLITERAL;
            }
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
