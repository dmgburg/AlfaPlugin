/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.dmgburg.alfa.psi.parser;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.dmgburg.alfa.psi.AlfaTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>AlfaLexer.flex</tt>
 */
public class _AlfaLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\2\3\3\22\0\1\5\1\0\1\10\3\0\1\16\1\6\2\0\1\12\1\23\1\0\1\24\1"+
    "\13\1\11\12\4\2\0\1\20\1\21\1\22\2\0\1\51\1\53\1\50\1\56\1\4\1\55\2\4\1\57"+
    "\2\4\1\60\2\4\1\52\13\4\1\0\1\7\2\0\1\4\1\0\1\26\1\46\1\33\1\44\1\30\1\45"+
    "\1\43\1\4\1\36\2\4\1\35\1\27\1\25\1\34\1\32\1\4\1\41\1\31\1\40\1\42\1\47\1"+
    "\4\1\54\1\37\1\4\1\14\1\17\1\15\7\0\1\1\242\0\2\1\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\2\1\1\4\1\5\1\6"+
    "\1\7\1\10\2\1\1\11\1\1\1\12\1\13\1\14"+
    "\16\3\1\0\1\15\3\0\1\16\1\0\1\17\1\20"+
    "\1\21\1\22\1\23\13\3\1\24\4\3\1\25\10\3"+
    "\1\15\1\0\15\3\1\26\7\3\1\27\2\3\1\30"+
    "\20\3\1\31\1\32\1\33\5\3\1\34\11\3\1\35"+
    "\12\3\1\36\1\3\1\37\1\40\2\3\1\41\1\3"+
    "\1\42\1\43\1\44\27\3\1\45\3\3\1\46\2\3"+
    "\1\47\1\50\1\51\1\3\1\52\1\3\1\53\7\3"+
    "\1\54\20\3\1\55\4\3\1\56\1\3\1\57\3\3"+
    "\1\60\1\3\1\61\5\3\1\62";

  private static int [] zzUnpackAction() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\61"+
    "\0\61\0\61\0\61\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b"+
    "\0\61\0\61\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341"+
    "\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9"+
    "\0\304\0\61\0\u04fa\0\365\0\u052b\0\u055c\0\u058d\0\61"+
    "\0\61\0\61\0\61\0\61\0\u05be\0\u05ef\0\u0620\0\u0651"+
    "\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\223"+
    "\0\u07d9\0\u080a\0\u083b\0\u086c\0\223\0\u089d\0\u08ce\0\u08ff"+
    "\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\365\0\u0a25\0\u0a56"+
    "\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde"+
    "\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2\0\223\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\223\0\u0e2a\0\u0e5b\0\u058d"+
    "\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\223\0\u119c\0\223\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\223\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8"+
    "\0\u1419\0\u144a\0\223\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f"+
    "\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\223\0\u1665\0\223"+
    "\0\u1696\0\u16c7\0\u16f8\0\223\0\u1729\0\223\0\223\0\223"+
    "\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1"+
    "\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\223"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\223\0\u1c54\0\u1c85\0\223\0\u1cb6"+
    "\0\223\0\u1ce7\0\223\0\u1d18\0\223\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\223\0\u1ea0\0\u1ed1\0\u1f02"+
    "\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a"+
    "\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\223\0\u21b0\0\u21e1"+
    "\0\u2212\0\u2243\0\223\0\u2274\0\223\0\u22a5\0\u22d6\0\u2307"+
    "\0\223\0\u2338\0\223\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\223";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\2\3\1\4\1\3\1\5\1\2\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\2\4\1\26"+
    "\1\27\1\30\1\4\1\31\1\4\1\32\1\33\2\4"+
    "\1\34\1\35\1\36\3\4\1\37\3\4\1\40\2\4"+
    "\63\0\2\3\1\0\1\3\57\0\1\4\20\0\34\4"+
    "\6\41\1\42\1\43\51\41\7\44\1\45\1\42\50\44"+
    "\11\0\1\46\1\47\64\0\1\50\61\0\1\51\62\0"+
    "\1\52\60\0\1\53\60\0\1\54\43\0\1\4\20\0"+
    "\1\4\1\55\32\4\4\0\1\4\20\0\1\56\4\4"+
    "\1\57\5\4\1\60\3\4\1\61\14\4\4\0\1\4"+
    "\20\0\15\4\1\62\16\4\4\0\1\4\20\0\3\4"+
    "\1\63\3\4\1\64\24\4\4\0\1\4\20\0\1\4"+
    "\1\65\5\4\1\66\1\67\23\4\4\0\1\4\20\0"+
    "\1\70\20\4\1\71\12\4\4\0\1\4\20\0\1\72"+
    "\1\4\1\73\1\4\1\74\12\4\1\75\14\4\4\0"+
    "\1\4\20\0\1\4\1\76\10\4\1\77\21\4\4\0"+
    "\1\4\20\0\15\4\1\100\16\4\4\0\1\4\20\0"+
    "\3\4\1\101\30\4\4\0\1\4\20\0\15\4\1\102"+
    "\16\4\4\0\1\4\20\0\1\4\1\103\32\4\4\0"+
    "\1\4\20\0\5\4\1\104\26\4\4\0\1\4\20\0"+
    "\3\4\1\105\30\4\1\41\3\0\55\41\7\44\1\45"+
    "\1\106\50\44\1\46\3\0\55\46\1\47\1\0\1\47"+
    "\1\0\6\47\1\107\46\47\4\0\1\4\20\0\2\4"+
    "\1\110\31\4\4\0\1\4\20\0\12\4\1\111\21\4"+
    "\4\0\1\4\20\0\5\4\1\112\26\4\4\0\1\4"+
    "\20\0\13\4\1\113\20\4\4\0\1\4\20\0\22\4"+
    "\1\114\11\4\4\0\1\4\20\0\4\4\1\115\27\4"+
    "\4\0\1\4\20\0\14\4\1\116\17\4\4\0\1\4"+
    "\20\0\10\4\1\117\23\4\4\0\1\4\20\0\13\4"+
    "\1\120\20\4\4\0\1\4\20\0\1\121\33\4\4\0"+
    "\1\4\20\0\1\4\1\122\32\4\4\0\1\4\20\0"+
    "\10\4\1\123\23\4\4\0\1\4\20\0\20\4\1\124"+
    "\1\4\1\125\11\4\4\0\1\4\20\0\5\4\1\126"+
    "\26\4\4\0\1\4\20\0\4\4\1\127\27\4\4\0"+
    "\1\4\20\0\14\4\1\130\17\4\4\0\1\4\20\0"+
    "\5\4\1\131\26\4\4\0\1\4\20\0\10\4\1\132"+
    "\23\4\4\0\1\4\20\0\1\133\33\4\4\0\1\4"+
    "\20\0\1\134\33\4\4\0\1\4\20\0\16\4\1\135"+
    "\15\4\4\0\1\4\20\0\3\4\1\136\30\4\4\0"+
    "\1\4\20\0\6\4\1\137\25\4\1\47\1\0\1\47"+
    "\1\0\5\47\1\140\1\107\46\47\4\0\1\4\20\0"+
    "\3\4\1\141\30\4\4\0\1\4\20\0\24\4\1\142"+
    "\7\4\4\0\1\4\20\0\10\4\1\143\23\4\4\0"+
    "\1\4\20\0\14\4\1\144\17\4\4\0\1\4\20\0"+
    "\11\4\1\145\22\4\4\0\1\4\20\0\13\4\1\146"+
    "\20\4\4\0\1\4\20\0\2\4\1\147\31\4\4\0"+
    "\1\4\20\0\11\4\1\150\22\4\4\0\1\4\20\0"+
    "\3\4\1\151\30\4\4\0\1\4\20\0\17\4\1\152"+
    "\14\4\4\0\1\4\20\0\15\4\1\153\16\4\4\0"+
    "\1\4\20\0\11\4\1\154\22\4\4\0\1\4\20\0"+
    "\11\4\1\155\22\4\4\0\1\4\20\0\7\4\1\156"+
    "\24\4\4\0\1\4\20\0\15\4\1\157\16\4\4\0"+
    "\1\4\20\0\16\4\1\160\15\4\4\0\1\4\20\0"+
    "\3\4\1\161\30\4\4\0\1\4\20\0\3\4\1\162"+
    "\30\4\4\0\1\4\20\0\12\4\1\163\21\4\4\0"+
    "\1\4\20\0\6\4\1\164\25\4\4\0\1\4\20\0"+
    "\14\4\1\165\17\4\4\0\1\4\20\0\11\4\1\166"+
    "\22\4\4\0\1\4\20\0\4\4\1\167\27\4\4\0"+
    "\1\4\20\0\13\4\1\170\20\4\4\0\1\4\20\0"+
    "\12\4\1\171\21\4\4\0\1\4\20\0\11\4\1\172"+
    "\22\4\4\0\1\4\20\0\6\4\1\173\25\4\4\0"+
    "\1\4\20\0\3\4\1\174\30\4\4\0\1\4\20\0"+
    "\11\4\1\175\22\4\4\0\1\4\20\0\6\4\1\176"+
    "\25\4\4\0\1\4\20\0\16\4\1\177\15\4\4\0"+
    "\1\4\20\0\11\4\1\200\22\4\4\0\1\4\20\0"+
    "\4\4\1\201\27\4\4\0\1\4\20\0\16\4\1\202"+
    "\15\4\4\0\1\4\20\0\27\4\1\203\4\4\4\0"+
    "\1\4\20\0\14\4\1\204\17\4\4\0\1\4\20\0"+
    "\3\4\1\205\30\4\4\0\1\4\20\0\3\4\1\206"+
    "\30\4\4\0\1\4\20\0\23\4\1\207\10\4\4\0"+
    "\1\4\20\0\13\4\1\210\20\4\4\0\1\4\20\0"+
    "\1\4\1\211\32\4\4\0\1\4\20\0\2\4\1\212"+
    "\31\4\4\0\1\4\20\0\5\4\1\213\26\4\4\0"+
    "\1\4\20\0\7\4\1\214\24\4\4\0\1\4\20\0"+
    "\21\4\1\215\12\4\4\0\1\4\20\0\3\4\1\216"+
    "\30\4\4\0\1\4\20\0\3\4\1\217\30\4\4\0"+
    "\1\4\20\0\13\4\1\220\20\4\4\0\1\4\20\0"+
    "\12\4\1\221\21\4\4\0\1\4\20\0\7\4\1\222"+
    "\24\4\4\0\1\4\20\0\13\4\1\223\20\4\4\0"+
    "\1\4\20\0\3\4\1\224\30\4\4\0\1\4\20\0"+
    "\1\4\1\225\32\4\4\0\1\4\20\0\13\4\1\226"+
    "\20\4\4\0\1\4\20\0\14\4\1\227\17\4\4\0"+
    "\1\4\20\0\13\4\1\230\20\4\4\0\1\4\20\0"+
    "\7\4\1\231\24\4\4\0\1\4\20\0\11\4\1\232"+
    "\22\4\4\0\1\4\20\0\13\4\1\233\20\4\4\0"+
    "\1\4\20\0\1\4\1\234\32\4\4\0\1\4\20\0"+
    "\1\4\1\235\32\4\4\0\1\4\20\0\2\4\1\236"+
    "\31\4\4\0\1\4\20\0\15\4\1\237\16\4\4\0"+
    "\1\4\20\0\5\4\1\240\26\4\4\0\1\4\20\0"+
    "\4\4\1\241\16\4\1\242\10\4\4\0\1\4\20\0"+
    "\14\4\1\243\17\4\4\0\1\4\20\0\11\4\1\244"+
    "\22\4\4\0\1\4\20\0\13\4\1\245\20\4\4\0"+
    "\1\4\20\0\2\4\1\246\31\4\4\0\1\4\20\0"+
    "\7\4\1\247\24\4\4\0\1\4\20\0\7\4\1\250"+
    "\24\4\4\0\1\4\20\0\10\4\1\251\23\4\4\0"+
    "\1\4\20\0\6\4\1\252\25\4\4\0\1\4\20\0"+
    "\11\4\1\253\22\4\4\0\1\4\20\0\13\4\1\254"+
    "\20\4\4\0\1\4\20\0\14\4\1\255\17\4\4\0"+
    "\1\4\20\0\3\4\1\256\30\4\4\0\1\4\20\0"+
    "\7\4\1\257\24\4\4\0\1\4\20\0\12\4\1\260"+
    "\21\4\4\0\1\4\20\0\7\4\1\261\24\4\4\0"+
    "\1\4\20\0\11\4\1\262\22\4\4\0\1\4\20\0"+
    "\21\4\1\263\12\4\4\0\1\4\20\0\1\264\33\4"+
    "\4\0\1\4\20\0\14\4\1\265\17\4\4\0\1\4"+
    "\20\0\32\4\1\266\1\4\4\0\1\4\20\0\3\4"+
    "\1\267\30\4\4\0\1\4\20\0\6\4\1\270\25\4"+
    "\4\0\1\4\20\0\3\4\1\271\30\4\4\0\1\4"+
    "\20\0\3\4\1\272\30\4\4\0\1\4\20\0\13\4"+
    "\1\273\20\4\4\0\1\4\20\0\2\4\1\274\31\4"+
    "\4\0\1\4\20\0\1\275\33\4\4\0\1\4\20\0"+
    "\7\4\1\276\24\4\4\0\1\4\20\0\11\4\1\277"+
    "\22\4\4\0\1\4\20\0\30\4\1\300\3\4\4\0"+
    "\1\4\20\0\1\301\33\4\4\0\1\4\20\0\25\4"+
    "\1\302\6\4\4\0\1\4\20\0\4\4\1\303\27\4"+
    "\4\0\1\4\20\0\21\4\1\304\12\4\4\0\1\4"+
    "\20\0\1\305\33\4\4\0\1\4\20\0\1\306\33\4"+
    "\4\0\1\4\20\0\3\4\1\307\30\4\4\0\1\4"+
    "\20\0\13\4\1\310\20\4\4\0\1\4\20\0\14\4"+
    "\1\311\17\4\4\0\1\4\20\0\3\4\1\312\30\4"+
    "\4\0\1\4\20\0\11\4\1\313\22\4\4\0\1\4"+
    "\20\0\1\4\1\314\32\4\4\0\1\4\20\0\1\4"+
    "\1\315\32\4\4\0\1\4\20\0\3\4\1\316\30\4"+
    "\4\0\1\4\20\0\26\4\1\317\5\4\4\0\1\4"+
    "\20\0\1\320\33\4\4\0\1\4\20\0\1\321\33\4"+
    "\4\0\1\4\20\0\13\4\1\322\20\4\4\0\1\4"+
    "\20\0\13\4\1\323\20\4\4\0\1\4\20\0\16\4"+
    "\1\324\15\4\4\0\1\4\20\0\1\4\1\325\32\4"+
    "\4\0\1\4\20\0\13\4\1\326\20\4\4\0\1\4"+
    "\20\0\1\4\1\327\32\4\4\0\1\4\20\0\7\4"+
    "\1\330\24\4\4\0\1\4\20\0\15\4\1\331\16\4"+
    "\4\0\1\4\20\0\3\4\1\332\30\4\4\0\1\4"+
    "\20\0\16\4\1\333\15\4\4\0\1\4\20\0\13\4"+
    "\1\334\20\4\4\0\1\4\20\0\14\4\1\335\17\4"+
    "\4\0\1\4\20\0\14\4\1\336\17\4\4\0\1\4"+
    "\20\0\14\4\1\337\17\4\4\0\1\4\20\0\7\4"+
    "\1\340\24\4\4\0\1\4\20\0\3\4\1\341\30\4"+
    "\4\0\1\4\20\0\33\4\1\342\4\0\1\4\20\0"+
    "\14\4\1\343\17\4\4\0\1\4\20\0\11\4\1\344"+
    "\22\4\4\0\1\4\20\0\13\4\1\345\20\4\4\0"+
    "\1\4\20\0\3\4\1\346\30\4\4\0\1\4\20\0"+
    "\14\4\1\347\17\4\4\0\1\4\20\0\1\4\1\350"+
    "\32\4\4\0\1\4\20\0\10\4\1\351\23\4";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9310];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\4\11\5\1\2\11\16\1\1\0"+
    "\1\11\3\0\1\1\1\0\5\11\32\1\1\0\242\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[233];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AlfaLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AlfaLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return BAD_CHARACTER;
            }
          case 51: break;
          case 2: 
            { return WHITE_SPACE;
            }
          case 52: break;
          case 3: 
            { return IDENTIFIER;
            }
          case 53: break;
          case 4: 
            { return DIVIDE;
            }
          case 54: break;
          case 5: 
            { return MULTIPLY;
            }
          case 55: break;
          case 6: 
            { return DOT;
            }
          case 56: break;
          case 7: 
            { return CURVE1;
            }
          case 57: break;
          case 8: 
            { return CURVE2;
            }
          case 58: break;
          case 9: 
            { return LESS;
            }
          case 59: break;
          case 10: 
            { return MORE;
            }
          case 60: break;
          case 11: 
            { return PLUS;
            }
          case 61: break;
          case 12: 
            { return MUNUS;
            }
          case 62: break;
          case 13: 
            { return STRING_LITERAL;
            }
          case 63: break;
          case 14: 
            { return LINE_COMMENT;
            }
          case 64: break;
          case 15: 
            { return AND;
            }
          case 65: break;
          case 16: 
            { return OR;
            }
          case 66: break;
          case 17: 
            { return LESSOREQUAL;
            }
          case 67: break;
          case 18: 
            { return EQUAL;
            }
          case 68: break;
          case 19: 
            { return MOREOREQUAL;
            }
          case 69: break;
          case 20: 
            { return ON;
            }
          case 70: break;
          case 21: 
            { return ID;
            }
          case 71: break;
          case 22: 
            { return INV;
            }
          case 72: break;
          case 23: 
            { return BAG;
            }
          case 73: break;
          case 24: 
            { return BLOCK_COMMENT;
            }
          case 74: break;
          case 25: 
            { return TYPE;
            }
          case 75: break;
          case 26: 
            { return RULE;
            }
          case 76: break;
          case 27: 
            { return DENY;
            }
          case 77: break;
          case 28: 
            { return APPLY;
            }
          case 78: break;
          case 29: 
            { return INFIX;
            }
          case 79: break;
          case 30: 
            { return ADVICE;
            }
          case 80: break;
          case 31: 
            { return PERMIT;
            }
          case 81: break;
          case 32: 
            { return POLICY;
            }
          case 82: break;
          case 33: 
            { return CLAUSE;
            }
          case 83: break;
          case 34: 
            { return IMPORT;
            }
          case 84: break;
          case 35: 
            { return ISSUER;
            }
          case 85: break;
          case 36: 
            { return TARGET;
            }
          case 86: break;
          case 37: 
            { return CATEGORY;
            }
          case 87: break;
          case 38: 
            { return FUNCTION;
            }
          case 88: break;
          case 39: 
            { return NAMESPACE;
            }
          case 89: break;
          case 40: 
            { return ANYATOMIC;
            }
          case 90: break;
          case 41: 
            { return ATTRIBUTE;
            }
          case 91: break;
          case 42: 
            { return POLICYSET;
            }
          case 92: break;
          case 43: 
            { return CONDITION;
            }
          case 93: break;
          case 44: 
            { return OBLIGATION;
            }
          case 94: break;
          case 45: 
            { return MUSTEEPRESENT;
            }
          case 95: break;
          case 46: 
            { return ANYATOMICORBAG;
            }
          case 96: break;
          case 47: 
            { return RULECOMBINATOR;
            }
          case 97: break;
          case 48: 
            { return OPERATORFEATURE;
            }
          case 98: break;
          case 49: 
            { return POLICYCOMBINATOR;
            }
          case 99: break;
          case 50: 
            { return DECIMALINTEGERLITERAL;
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
